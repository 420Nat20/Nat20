// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SubLocation is an object representing the database table.
type SubLocation struct {
	ID               int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt        time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt        time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt        null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	Name             null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	EventDescription null.String `boil:"event_description" json:"event_description,omitempty" toml:"event_description" yaml:"event_description,omitempty"`
	Visited          null.Bool   `boil:"visited" json:"visited,omitempty" toml:"visited" yaml:"visited,omitempty"`
	LocationID       int         `boil:"location_id" json:"location_id" toml:"location_id" yaml:"location_id"`

	R *subLocationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L subLocationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SubLocationColumns = struct {
	ID               string
	CreatedAt        string
	UpdatedAt        string
	DeletedAt        string
	Name             string
	EventDescription string
	Visited          string
	LocationID       string
}{
	ID:               "id",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
	DeletedAt:        "deleted_at",
	Name:             "name",
	EventDescription: "event_description",
	Visited:          "visited",
	LocationID:       "location_id",
}

// Generated where

var SubLocationWhere = struct {
	ID               whereHelperint
	CreatedAt        whereHelpertime_Time
	UpdatedAt        whereHelpertime_Time
	DeletedAt        whereHelpernull_Time
	Name             whereHelpernull_String
	EventDescription whereHelpernull_String
	Visited          whereHelpernull_Bool
	LocationID       whereHelperint
}{
	ID:               whereHelperint{field: "\"sub_locations\".\"id\""},
	CreatedAt:        whereHelpertime_Time{field: "\"sub_locations\".\"created_at\""},
	UpdatedAt:        whereHelpertime_Time{field: "\"sub_locations\".\"updated_at\""},
	DeletedAt:        whereHelpernull_Time{field: "\"sub_locations\".\"deleted_at\""},
	Name:             whereHelpernull_String{field: "\"sub_locations\".\"name\""},
	EventDescription: whereHelpernull_String{field: "\"sub_locations\".\"event_description\""},
	Visited:          whereHelpernull_Bool{field: "\"sub_locations\".\"visited\""},
	LocationID:       whereHelperint{field: "\"sub_locations\".\"location_id\""},
}

// SubLocationRels is where relationship names are stored.
var SubLocationRels = struct {
	Location string
}{
	Location: "Location",
}

// subLocationR is where relationships are stored.
type subLocationR struct {
	Location *Location `boil:"Location" json:"Location" toml:"Location" yaml:"Location"`
}

// NewStruct creates a new relationship struct
func (*subLocationR) NewStruct() *subLocationR {
	return &subLocationR{}
}

// subLocationL is where Load methods for each relationship are stored.
type subLocationL struct{}

var (
	subLocationAllColumns            = []string{"id", "created_at", "updated_at", "deleted_at", "name", "event_description", "visited", "location_id"}
	subLocationColumnsWithoutDefault = []string{"created_at", "updated_at", "deleted_at", "name", "event_description", "location_id"}
	subLocationColumnsWithDefault    = []string{"id", "visited"}
	subLocationPrimaryKeyColumns     = []string{"id"}
)

type (
	// SubLocationSlice is an alias for a slice of pointers to SubLocation.
	// This should generally be used opposed to []SubLocation.
	SubLocationSlice []*SubLocation
	// SubLocationHook is the signature for custom SubLocation hook methods
	SubLocationHook func(context.Context, boil.ContextExecutor, *SubLocation) error

	subLocationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	subLocationType                 = reflect.TypeOf(&SubLocation{})
	subLocationMapping              = queries.MakeStructMapping(subLocationType)
	subLocationPrimaryKeyMapping, _ = queries.BindMapping(subLocationType, subLocationMapping, subLocationPrimaryKeyColumns)
	subLocationInsertCacheMut       sync.RWMutex
	subLocationInsertCache          = make(map[string]insertCache)
	subLocationUpdateCacheMut       sync.RWMutex
	subLocationUpdateCache          = make(map[string]updateCache)
	subLocationUpsertCacheMut       sync.RWMutex
	subLocationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var subLocationBeforeInsertHooks []SubLocationHook
var subLocationBeforeUpdateHooks []SubLocationHook
var subLocationBeforeDeleteHooks []SubLocationHook
var subLocationBeforeUpsertHooks []SubLocationHook

var subLocationAfterInsertHooks []SubLocationHook
var subLocationAfterSelectHooks []SubLocationHook
var subLocationAfterUpdateHooks []SubLocationHook
var subLocationAfterDeleteHooks []SubLocationHook
var subLocationAfterUpsertHooks []SubLocationHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SubLocation) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subLocationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SubLocation) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subLocationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SubLocation) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subLocationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SubLocation) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subLocationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SubLocation) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subLocationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SubLocation) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subLocationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SubLocation) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subLocationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SubLocation) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subLocationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SubLocation) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subLocationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSubLocationHook registers your hook function for all future operations.
func AddSubLocationHook(hookPoint boil.HookPoint, subLocationHook SubLocationHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		subLocationBeforeInsertHooks = append(subLocationBeforeInsertHooks, subLocationHook)
	case boil.BeforeUpdateHook:
		subLocationBeforeUpdateHooks = append(subLocationBeforeUpdateHooks, subLocationHook)
	case boil.BeforeDeleteHook:
		subLocationBeforeDeleteHooks = append(subLocationBeforeDeleteHooks, subLocationHook)
	case boil.BeforeUpsertHook:
		subLocationBeforeUpsertHooks = append(subLocationBeforeUpsertHooks, subLocationHook)
	case boil.AfterInsertHook:
		subLocationAfterInsertHooks = append(subLocationAfterInsertHooks, subLocationHook)
	case boil.AfterSelectHook:
		subLocationAfterSelectHooks = append(subLocationAfterSelectHooks, subLocationHook)
	case boil.AfterUpdateHook:
		subLocationAfterUpdateHooks = append(subLocationAfterUpdateHooks, subLocationHook)
	case boil.AfterDeleteHook:
		subLocationAfterDeleteHooks = append(subLocationAfterDeleteHooks, subLocationHook)
	case boil.AfterUpsertHook:
		subLocationAfterUpsertHooks = append(subLocationAfterUpsertHooks, subLocationHook)
	}
}

// One returns a single subLocation record from the query.
func (q subLocationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SubLocation, error) {
	o := &SubLocation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sub_locations")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SubLocation records from the query.
func (q subLocationQuery) All(ctx context.Context, exec boil.ContextExecutor) (SubLocationSlice, error) {
	var o []*SubLocation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SubLocation slice")
	}

	if len(subLocationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SubLocation records in the query.
func (q subLocationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sub_locations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q subLocationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sub_locations exists")
	}

	return count > 0, nil
}

// Location pointed to by the foreign key.
func (o *SubLocation) Location(mods ...qm.QueryMod) locationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.LocationID),
	}

	queryMods = append(queryMods, mods...)

	query := Locations(queryMods...)
	queries.SetFrom(query.Query, "\"locations\"")

	return query
}

// LoadLocation allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (subLocationL) LoadLocation(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSubLocation interface{}, mods queries.Applicator) error {
	var slice []*SubLocation
	var object *SubLocation

	if singular {
		object = maybeSubLocation.(*SubLocation)
	} else {
		slice = *maybeSubLocation.(*[]*SubLocation)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &subLocationR{}
		}
		args = append(args, object.LocationID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &subLocationR{}
			}

			for _, a := range args {
				if a == obj.LocationID {
					continue Outer
				}
			}

			args = append(args, obj.LocationID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`locations`),
		qm.WhereIn(`locations.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Location")
	}

	var resultSlice []*Location
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Location")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for locations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for locations")
	}

	if len(subLocationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Location = foreign
		if foreign.R == nil {
			foreign.R = &locationR{}
		}
		foreign.R.SubLocations = append(foreign.R.SubLocations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LocationID == foreign.ID {
				local.R.Location = foreign
				if foreign.R == nil {
					foreign.R = &locationR{}
				}
				foreign.R.SubLocations = append(foreign.R.SubLocations, local)
				break
			}
		}
	}

	return nil
}

// SetLocation of the subLocation to the related item.
// Sets o.R.Location to related.
// Adds o to related.R.SubLocations.
func (o *SubLocation) SetLocation(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Location) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"sub_locations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"location_id"}),
		strmangle.WhereClause("\"", "\"", 2, subLocationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LocationID = related.ID
	if o.R == nil {
		o.R = &subLocationR{
			Location: related,
		}
	} else {
		o.R.Location = related
	}

	if related.R == nil {
		related.R = &locationR{
			SubLocations: SubLocationSlice{o},
		}
	} else {
		related.R.SubLocations = append(related.R.SubLocations, o)
	}

	return nil
}

// SubLocations retrieves all the records using an executor.
func SubLocations(mods ...qm.QueryMod) subLocationQuery {
	mods = append(mods, qm.From("\"sub_locations\""))
	return subLocationQuery{NewQuery(mods...)}
}

// FindSubLocation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSubLocation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*SubLocation, error) {
	subLocationObj := &SubLocation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"sub_locations\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, subLocationObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sub_locations")
	}

	return subLocationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SubLocation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sub_locations provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(subLocationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	subLocationInsertCacheMut.RLock()
	cache, cached := subLocationInsertCache[key]
	subLocationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			subLocationAllColumns,
			subLocationColumnsWithDefault,
			subLocationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(subLocationType, subLocationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(subLocationType, subLocationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"sub_locations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"sub_locations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sub_locations")
	}

	if !cached {
		subLocationInsertCacheMut.Lock()
		subLocationInsertCache[key] = cache
		subLocationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SubLocation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SubLocation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	subLocationUpdateCacheMut.RLock()
	cache, cached := subLocationUpdateCache[key]
	subLocationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			subLocationAllColumns,
			subLocationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sub_locations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"sub_locations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, subLocationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(subLocationType, subLocationMapping, append(wl, subLocationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sub_locations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sub_locations")
	}

	if !cached {
		subLocationUpdateCacheMut.Lock()
		subLocationUpdateCache[key] = cache
		subLocationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q subLocationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sub_locations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sub_locations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SubLocationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), subLocationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"sub_locations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, subLocationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in subLocation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all subLocation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SubLocation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sub_locations provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(subLocationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	subLocationUpsertCacheMut.RLock()
	cache, cached := subLocationUpsertCache[key]
	subLocationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			subLocationAllColumns,
			subLocationColumnsWithDefault,
			subLocationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			subLocationAllColumns,
			subLocationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert sub_locations, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(subLocationPrimaryKeyColumns))
			copy(conflict, subLocationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"sub_locations\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(subLocationType, subLocationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(subLocationType, subLocationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert sub_locations")
	}

	if !cached {
		subLocationUpsertCacheMut.Lock()
		subLocationUpsertCache[key] = cache
		subLocationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SubLocation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SubLocation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SubLocation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), subLocationPrimaryKeyMapping)
	sql := "DELETE FROM \"sub_locations\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sub_locations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sub_locations")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q subLocationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no subLocationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sub_locations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sub_locations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SubLocationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(subLocationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), subLocationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"sub_locations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, subLocationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from subLocation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sub_locations")
	}

	if len(subLocationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SubLocation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSubLocation(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SubLocationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SubLocationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), subLocationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"sub_locations\".* FROM \"sub_locations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, subLocationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SubLocationSlice")
	}

	*o = slice

	return nil
}

// SubLocationExists checks if the SubLocation row exists.
func SubLocationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"sub_locations\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sub_locations exists")
	}

	return exists, nil
}
