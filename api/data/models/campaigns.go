// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Campaign is an object representing the database table.
type Campaign struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DMID      int       `boil:"dm_id" json:"dm_id" toml:"dm_id" yaml:"dm_id"`

	R *campaignR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L campaignL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CampaignColumns = struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	DMID      string
}{
	ID:        "id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DMID:      "dm_id",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var CampaignWhere = struct {
	ID        whereHelperint
	CreatedAt whereHelpernull_Time
	UpdatedAt whereHelpernull_Time
	DMID      whereHelperint
}{
	ID:        whereHelperint{field: "\"campaigns\".\"id\""},
	CreatedAt: whereHelpernull_Time{field: "\"campaigns\".\"created_at\""},
	UpdatedAt: whereHelpernull_Time{field: "\"campaigns\".\"updated_at\""},
	DMID:      whereHelperint{field: "\"campaigns\".\"dm_id\""},
}

// CampaignRels is where relationship names are stored.
var CampaignRels = struct {
	DM               string
	Locations        string
	PlayerCharacters string
}{
	DM:               "DM",
	Locations:        "Locations",
	PlayerCharacters: "PlayerCharacters",
}

// campaignR is where relationships are stored.
type campaignR struct {
	DM               *User                `boil:"DM" json:"DM" toml:"DM" yaml:"DM"`
	Locations        LocationSlice        `boil:"Locations" json:"Locations" toml:"Locations" yaml:"Locations"`
	PlayerCharacters PlayerCharacterSlice `boil:"PlayerCharacters" json:"PlayerCharacters" toml:"PlayerCharacters" yaml:"PlayerCharacters"`
}

// NewStruct creates a new relationship struct
func (*campaignR) NewStruct() *campaignR {
	return &campaignR{}
}

// campaignL is where Load methods for each relationship are stored.
type campaignL struct{}

var (
	campaignAllColumns            = []string{"id", "created_at", "updated_at", "dm_id"}
	campaignColumnsWithoutDefault = []string{"created_at", "updated_at", "dm_id"}
	campaignColumnsWithDefault    = []string{"id"}
	campaignPrimaryKeyColumns     = []string{"id"}
)

type (
	// CampaignSlice is an alias for a slice of pointers to Campaign.
	// This should generally be used opposed to []Campaign.
	CampaignSlice []*Campaign
	// CampaignHook is the signature for custom Campaign hook methods
	CampaignHook func(context.Context, boil.ContextExecutor, *Campaign) error

	campaignQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	campaignType                 = reflect.TypeOf(&Campaign{})
	campaignMapping              = queries.MakeStructMapping(campaignType)
	campaignPrimaryKeyMapping, _ = queries.BindMapping(campaignType, campaignMapping, campaignPrimaryKeyColumns)
	campaignInsertCacheMut       sync.RWMutex
	campaignInsertCache          = make(map[string]insertCache)
	campaignUpdateCacheMut       sync.RWMutex
	campaignUpdateCache          = make(map[string]updateCache)
	campaignUpsertCacheMut       sync.RWMutex
	campaignUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var campaignBeforeInsertHooks []CampaignHook
var campaignBeforeUpdateHooks []CampaignHook
var campaignBeforeDeleteHooks []CampaignHook
var campaignBeforeUpsertHooks []CampaignHook

var campaignAfterInsertHooks []CampaignHook
var campaignAfterSelectHooks []CampaignHook
var campaignAfterUpdateHooks []CampaignHook
var campaignAfterDeleteHooks []CampaignHook
var campaignAfterUpsertHooks []CampaignHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Campaign) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range campaignBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Campaign) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range campaignBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Campaign) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range campaignBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Campaign) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range campaignBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Campaign) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range campaignAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Campaign) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range campaignAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Campaign) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range campaignAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Campaign) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range campaignAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Campaign) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range campaignAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCampaignHook registers your hook function for all future operations.
func AddCampaignHook(hookPoint boil.HookPoint, campaignHook CampaignHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		campaignBeforeInsertHooks = append(campaignBeforeInsertHooks, campaignHook)
	case boil.BeforeUpdateHook:
		campaignBeforeUpdateHooks = append(campaignBeforeUpdateHooks, campaignHook)
	case boil.BeforeDeleteHook:
		campaignBeforeDeleteHooks = append(campaignBeforeDeleteHooks, campaignHook)
	case boil.BeforeUpsertHook:
		campaignBeforeUpsertHooks = append(campaignBeforeUpsertHooks, campaignHook)
	case boil.AfterInsertHook:
		campaignAfterInsertHooks = append(campaignAfterInsertHooks, campaignHook)
	case boil.AfterSelectHook:
		campaignAfterSelectHooks = append(campaignAfterSelectHooks, campaignHook)
	case boil.AfterUpdateHook:
		campaignAfterUpdateHooks = append(campaignAfterUpdateHooks, campaignHook)
	case boil.AfterDeleteHook:
		campaignAfterDeleteHooks = append(campaignAfterDeleteHooks, campaignHook)
	case boil.AfterUpsertHook:
		campaignAfterUpsertHooks = append(campaignAfterUpsertHooks, campaignHook)
	}
}

// One returns a single campaign record from the query.
func (q campaignQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Campaign, error) {
	o := &Campaign{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for campaigns")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Campaign records from the query.
func (q campaignQuery) All(ctx context.Context, exec boil.ContextExecutor) (CampaignSlice, error) {
	var o []*Campaign

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Campaign slice")
	}

	if len(campaignAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Campaign records in the query.
func (q campaignQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count campaigns rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q campaignQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if campaigns exists")
	}

	return count > 0, nil
}

// DM pointed to by the foreign key.
func (o *Campaign) DM(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DMID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// Locations retrieves all the location's Locations with an executor.
func (o *Campaign) Locations(mods ...qm.QueryMod) locationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"locations\".\"campaign_id\"=?", o.ID),
	)

	query := Locations(queryMods...)
	queries.SetFrom(query.Query, "\"locations\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"locations\".*"})
	}

	return query
}

// PlayerCharacters retrieves all the player_character's PlayerCharacters with an executor.
func (o *Campaign) PlayerCharacters(mods ...qm.QueryMod) playerCharacterQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"player_characters\".\"campaign_id\"=?", o.ID),
	)

	query := PlayerCharacters(queryMods...)
	queries.SetFrom(query.Query, "\"player_characters\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"player_characters\".*"})
	}

	return query
}

// LoadDM allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (campaignL) LoadDM(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCampaign interface{}, mods queries.Applicator) error {
	var slice []*Campaign
	var object *Campaign

	if singular {
		object = maybeCampaign.(*Campaign)
	} else {
		slice = *maybeCampaign.(*[]*Campaign)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &campaignR{}
		}
		args = append(args, object.DMID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &campaignR{}
			}

			for _, a := range args {
				if a == obj.DMID {
					continue Outer
				}
			}

			args = append(args, obj.DMID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(campaignAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DM = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.DMCampaigns = append(foreign.R.DMCampaigns, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DMID == foreign.ID {
				local.R.DM = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.DMCampaigns = append(foreign.R.DMCampaigns, local)
				break
			}
		}
	}

	return nil
}

// LoadLocations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (campaignL) LoadLocations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCampaign interface{}, mods queries.Applicator) error {
	var slice []*Campaign
	var object *Campaign

	if singular {
		object = maybeCampaign.(*Campaign)
	} else {
		slice = *maybeCampaign.(*[]*Campaign)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &campaignR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &campaignR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`locations`),
		qm.WhereIn(`locations.campaign_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load locations")
	}

	var resultSlice []*Location
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice locations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on locations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for locations")
	}

	if len(locationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Locations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &locationR{}
			}
			foreign.R.Campaign = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CampaignID {
				local.R.Locations = append(local.R.Locations, foreign)
				if foreign.R == nil {
					foreign.R = &locationR{}
				}
				foreign.R.Campaign = local
				break
			}
		}
	}

	return nil
}

// LoadPlayerCharacters allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (campaignL) LoadPlayerCharacters(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCampaign interface{}, mods queries.Applicator) error {
	var slice []*Campaign
	var object *Campaign

	if singular {
		object = maybeCampaign.(*Campaign)
	} else {
		slice = *maybeCampaign.(*[]*Campaign)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &campaignR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &campaignR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`player_characters`),
		qm.WhereIn(`player_characters.campaign_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load player_characters")
	}

	var resultSlice []*PlayerCharacter
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice player_characters")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on player_characters")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for player_characters")
	}

	if len(playerCharacterAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PlayerCharacters = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &playerCharacterR{}
			}
			foreign.R.Campaign = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.CampaignID) {
				local.R.PlayerCharacters = append(local.R.PlayerCharacters, foreign)
				if foreign.R == nil {
					foreign.R = &playerCharacterR{}
				}
				foreign.R.Campaign = local
				break
			}
		}
	}

	return nil
}

// SetDM of the campaign to the related item.
// Sets o.R.DM to related.
// Adds o to related.R.DMCampaigns.
func (o *Campaign) SetDM(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"campaigns\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"dm_id"}),
		strmangle.WhereClause("\"", "\"", 2, campaignPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DMID = related.ID
	if o.R == nil {
		o.R = &campaignR{
			DM: related,
		}
	} else {
		o.R.DM = related
	}

	if related.R == nil {
		related.R = &userR{
			DMCampaigns: CampaignSlice{o},
		}
	} else {
		related.R.DMCampaigns = append(related.R.DMCampaigns, o)
	}

	return nil
}

// AddLocations adds the given related objects to the existing relationships
// of the campaign, optionally inserting them as new records.
// Appends related to o.R.Locations.
// Sets related.R.Campaign appropriately.
func (o *Campaign) AddLocations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Location) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CampaignID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"locations\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"campaign_id"}),
				strmangle.WhereClause("\"", "\"", 2, locationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CampaignID = o.ID
		}
	}

	if o.R == nil {
		o.R = &campaignR{
			Locations: related,
		}
	} else {
		o.R.Locations = append(o.R.Locations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &locationR{
				Campaign: o,
			}
		} else {
			rel.R.Campaign = o
		}
	}
	return nil
}

// AddPlayerCharacters adds the given related objects to the existing relationships
// of the campaign, optionally inserting them as new records.
// Appends related to o.R.PlayerCharacters.
// Sets related.R.Campaign appropriately.
func (o *Campaign) AddPlayerCharacters(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PlayerCharacter) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CampaignID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"player_characters\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"campaign_id"}),
				strmangle.WhereClause("\"", "\"", 2, playerCharacterPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CampaignID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &campaignR{
			PlayerCharacters: related,
		}
	} else {
		o.R.PlayerCharacters = append(o.R.PlayerCharacters, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &playerCharacterR{
				Campaign: o,
			}
		} else {
			rel.R.Campaign = o
		}
	}
	return nil
}

// SetPlayerCharacters removes all previously related items of the
// campaign replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Campaign's PlayerCharacters accordingly.
// Replaces o.R.PlayerCharacters with related.
// Sets related.R.Campaign's PlayerCharacters accordingly.
func (o *Campaign) SetPlayerCharacters(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PlayerCharacter) error {
	query := "update \"player_characters\" set \"campaign_id\" = null where \"campaign_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.PlayerCharacters {
			queries.SetScanner(&rel.CampaignID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Campaign = nil
		}

		o.R.PlayerCharacters = nil
	}
	return o.AddPlayerCharacters(ctx, exec, insert, related...)
}

// RemovePlayerCharacters relationships from objects passed in.
// Removes related items from R.PlayerCharacters (uses pointer comparison, removal does not keep order)
// Sets related.R.Campaign.
func (o *Campaign) RemovePlayerCharacters(ctx context.Context, exec boil.ContextExecutor, related ...*PlayerCharacter) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CampaignID, nil)
		if rel.R != nil {
			rel.R.Campaign = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("campaign_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.PlayerCharacters {
			if rel != ri {
				continue
			}

			ln := len(o.R.PlayerCharacters)
			if ln > 1 && i < ln-1 {
				o.R.PlayerCharacters[i] = o.R.PlayerCharacters[ln-1]
			}
			o.R.PlayerCharacters = o.R.PlayerCharacters[:ln-1]
			break
		}
	}

	return nil
}

// Campaigns retrieves all the records using an executor.
func Campaigns(mods ...qm.QueryMod) campaignQuery {
	mods = append(mods, qm.From("\"campaigns\""))
	return campaignQuery{NewQuery(mods...)}
}

// FindCampaign retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCampaign(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Campaign, error) {
	campaignObj := &Campaign{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"campaigns\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, campaignObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from campaigns")
	}

	return campaignObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Campaign) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no campaigns provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(campaignColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	campaignInsertCacheMut.RLock()
	cache, cached := campaignInsertCache[key]
	campaignInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			campaignAllColumns,
			campaignColumnsWithDefault,
			campaignColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(campaignType, campaignMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(campaignType, campaignMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"campaigns\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"campaigns\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into campaigns")
	}

	if !cached {
		campaignInsertCacheMut.Lock()
		campaignInsertCache[key] = cache
		campaignInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Campaign.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Campaign) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	campaignUpdateCacheMut.RLock()
	cache, cached := campaignUpdateCache[key]
	campaignUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			campaignAllColumns,
			campaignPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update campaigns, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"campaigns\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, campaignPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(campaignType, campaignMapping, append(wl, campaignPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update campaigns row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for campaigns")
	}

	if !cached {
		campaignUpdateCacheMut.Lock()
		campaignUpdateCache[key] = cache
		campaignUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q campaignQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for campaigns")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for campaigns")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CampaignSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), campaignPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"campaigns\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, campaignPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in campaign slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all campaign")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Campaign) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no campaigns provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(campaignColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	campaignUpsertCacheMut.RLock()
	cache, cached := campaignUpsertCache[key]
	campaignUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			campaignAllColumns,
			campaignColumnsWithDefault,
			campaignColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			campaignAllColumns,
			campaignPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert campaigns, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(campaignPrimaryKeyColumns))
			copy(conflict, campaignPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"campaigns\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(campaignType, campaignMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(campaignType, campaignMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert campaigns")
	}

	if !cached {
		campaignUpsertCacheMut.Lock()
		campaignUpsertCache[key] = cache
		campaignUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Campaign record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Campaign) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Campaign provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), campaignPrimaryKeyMapping)
	sql := "DELETE FROM \"campaigns\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from campaigns")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for campaigns")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q campaignQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no campaignQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from campaigns")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for campaigns")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CampaignSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(campaignBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), campaignPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"campaigns\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, campaignPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from campaign slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for campaigns")
	}

	if len(campaignAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Campaign) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCampaign(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CampaignSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CampaignSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), campaignPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"campaigns\".* FROM \"campaigns\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, campaignPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CampaignSlice")
	}

	*o = slice

	return nil
}

// CampaignExists checks if the Campaign row exists.
func CampaignExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"campaigns\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if campaigns exists")
	}

	return exists, nil
}
