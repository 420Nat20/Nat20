// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PlayerCharacter is an object representing the database table.
type PlayerCharacter struct {
	ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt    time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt    time.Time   `boil:"deleted_at" json:"deleted_at" toml:"deleted_at" yaml:"deleted_at"`
	CampaignID   null.Int    `boil:"campaign_id" json:"campaign_id,omitempty" toml:"campaign_id" yaml:"campaign_id,omitempty"`
	UserID       int         `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Name         string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Class        string      `boil:"class" json:"class" toml:"class" yaml:"class"`
	Background   string      `boil:"background" json:"background" toml:"background" yaml:"background"`
	Race         string      `boil:"race" json:"race" toml:"race" yaml:"race"`
	Alignment    string      `boil:"alignment" json:"alignment" toml:"alignment" yaml:"alignment"`
	Strength     int         `boil:"strength" json:"strength" toml:"strength" yaml:"strength"`
	Dexterity    int         `boil:"dexterity" json:"dexterity" toml:"dexterity" yaml:"dexterity"`
	Constitution int         `boil:"constitution" json:"constitution" toml:"constitution" yaml:"constitution"`
	Intelligence int         `boil:"intelligence" json:"intelligence" toml:"intelligence" yaml:"intelligence"`
	Wisdom       int         `boil:"wisdom" json:"wisdom" toml:"wisdom" yaml:"wisdom"`
	Charisma     int         `boil:"charisma" json:"charisma" toml:"charisma" yaml:"charisma"`
	TraitOne     null.String `boil:"trait_one" json:"trait_one,omitempty" toml:"trait_one" yaml:"trait_one,omitempty"`
	TraitTwo     null.String `boil:"trait_two" json:"trait_two,omitempty" toml:"trait_two" yaml:"trait_two,omitempty"`
	Ideal        null.String `boil:"ideal" json:"ideal,omitempty" toml:"ideal" yaml:"ideal,omitempty"`
	Bond         null.String `boil:"bond" json:"bond,omitempty" toml:"bond" yaml:"bond,omitempty"`
	Flaw         null.String `boil:"flaw" json:"flaw,omitempty" toml:"flaw" yaml:"flaw,omitempty"`

	R *playerCharacterR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L playerCharacterL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PlayerCharacterColumns = struct {
	ID           string
	CreatedAt    string
	UpdatedAt    string
	DeletedAt    string
	CampaignID   string
	UserID       string
	Name         string
	Class        string
	Background   string
	Race         string
	Alignment    string
	Strength     string
	Dexterity    string
	Constitution string
	Intelligence string
	Wisdom       string
	Charisma     string
	TraitOne     string
	TraitTwo     string
	Ideal        string
	Bond         string
	Flaw         string
}{
	ID:           "id",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
	DeletedAt:    "deleted_at",
	CampaignID:   "campaign_id",
	UserID:       "user_id",
	Name:         "name",
	Class:        "class",
	Background:   "background",
	Race:         "race",
	Alignment:    "alignment",
	Strength:     "strength",
	Dexterity:    "dexterity",
	Constitution: "constitution",
	Intelligence: "intelligence",
	Wisdom:       "wisdom",
	Charisma:     "charisma",
	TraitOne:     "trait_one",
	TraitTwo:     "trait_two",
	Ideal:        "ideal",
	Bond:         "bond",
	Flaw:         "flaw",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var PlayerCharacterWhere = struct {
	ID           whereHelperint
	CreatedAt    whereHelpertime_Time
	UpdatedAt    whereHelpertime_Time
	DeletedAt    whereHelpertime_Time
	CampaignID   whereHelpernull_Int
	UserID       whereHelperint
	Name         whereHelperstring
	Class        whereHelperstring
	Background   whereHelperstring
	Race         whereHelperstring
	Alignment    whereHelperstring
	Strength     whereHelperint
	Dexterity    whereHelperint
	Constitution whereHelperint
	Intelligence whereHelperint
	Wisdom       whereHelperint
	Charisma     whereHelperint
	TraitOne     whereHelpernull_String
	TraitTwo     whereHelpernull_String
	Ideal        whereHelpernull_String
	Bond         whereHelpernull_String
	Flaw         whereHelpernull_String
}{
	ID:           whereHelperint{field: "\"player_characters\".\"id\""},
	CreatedAt:    whereHelpertime_Time{field: "\"player_characters\".\"created_at\""},
	UpdatedAt:    whereHelpertime_Time{field: "\"player_characters\".\"updated_at\""},
	DeletedAt:    whereHelpertime_Time{field: "\"player_characters\".\"deleted_at\""},
	CampaignID:   whereHelpernull_Int{field: "\"player_characters\".\"campaign_id\""},
	UserID:       whereHelperint{field: "\"player_characters\".\"user_id\""},
	Name:         whereHelperstring{field: "\"player_characters\".\"name\""},
	Class:        whereHelperstring{field: "\"player_characters\".\"class\""},
	Background:   whereHelperstring{field: "\"player_characters\".\"background\""},
	Race:         whereHelperstring{field: "\"player_characters\".\"race\""},
	Alignment:    whereHelperstring{field: "\"player_characters\".\"alignment\""},
	Strength:     whereHelperint{field: "\"player_characters\".\"strength\""},
	Dexterity:    whereHelperint{field: "\"player_characters\".\"dexterity\""},
	Constitution: whereHelperint{field: "\"player_characters\".\"constitution\""},
	Intelligence: whereHelperint{field: "\"player_characters\".\"intelligence\""},
	Wisdom:       whereHelperint{field: "\"player_characters\".\"wisdom\""},
	Charisma:     whereHelperint{field: "\"player_characters\".\"charisma\""},
	TraitOne:     whereHelpernull_String{field: "\"player_characters\".\"trait_one\""},
	TraitTwo:     whereHelpernull_String{field: "\"player_characters\".\"trait_two\""},
	Ideal:        whereHelpernull_String{field: "\"player_characters\".\"ideal\""},
	Bond:         whereHelpernull_String{field: "\"player_characters\".\"bond\""},
	Flaw:         whereHelpernull_String{field: "\"player_characters\".\"flaw\""},
}

// PlayerCharacterRels is where relationship names are stored.
var PlayerCharacterRels = struct {
	Campaign string
	User     string
}{
	Campaign: "Campaign",
	User:     "User",
}

// playerCharacterR is where relationships are stored.
type playerCharacterR struct {
	Campaign *Campaign `boil:"Campaign" json:"Campaign" toml:"Campaign" yaml:"Campaign"`
	User     *User     `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*playerCharacterR) NewStruct() *playerCharacterR {
	return &playerCharacterR{}
}

// playerCharacterL is where Load methods for each relationship are stored.
type playerCharacterL struct{}

var (
	playerCharacterAllColumns            = []string{"id", "created_at", "updated_at", "deleted_at", "campaign_id", "user_id", "name", "class", "background", "race", "alignment", "strength", "dexterity", "constitution", "intelligence", "wisdom", "charisma", "trait_one", "trait_two", "ideal", "bond", "flaw"}
	playerCharacterColumnsWithoutDefault = []string{"created_at", "updated_at", "deleted_at", "campaign_id", "user_id", "name", "class", "background", "race", "alignment", "strength", "dexterity", "constitution", "intelligence", "wisdom", "charisma", "trait_one", "trait_two", "ideal", "bond", "flaw"}
	playerCharacterColumnsWithDefault    = []string{"id"}
	playerCharacterPrimaryKeyColumns     = []string{"id"}
)

type (
	// PlayerCharacterSlice is an alias for a slice of pointers to PlayerCharacter.
	// This should generally be used opposed to []PlayerCharacter.
	PlayerCharacterSlice []*PlayerCharacter
	// PlayerCharacterHook is the signature for custom PlayerCharacter hook methods
	PlayerCharacterHook func(context.Context, boil.ContextExecutor, *PlayerCharacter) error

	playerCharacterQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	playerCharacterType                 = reflect.TypeOf(&PlayerCharacter{})
	playerCharacterMapping              = queries.MakeStructMapping(playerCharacterType)
	playerCharacterPrimaryKeyMapping, _ = queries.BindMapping(playerCharacterType, playerCharacterMapping, playerCharacterPrimaryKeyColumns)
	playerCharacterInsertCacheMut       sync.RWMutex
	playerCharacterInsertCache          = make(map[string]insertCache)
	playerCharacterUpdateCacheMut       sync.RWMutex
	playerCharacterUpdateCache          = make(map[string]updateCache)
	playerCharacterUpsertCacheMut       sync.RWMutex
	playerCharacterUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var playerCharacterBeforeInsertHooks []PlayerCharacterHook
var playerCharacterBeforeUpdateHooks []PlayerCharacterHook
var playerCharacterBeforeDeleteHooks []PlayerCharacterHook
var playerCharacterBeforeUpsertHooks []PlayerCharacterHook

var playerCharacterAfterInsertHooks []PlayerCharacterHook
var playerCharacterAfterSelectHooks []PlayerCharacterHook
var playerCharacterAfterUpdateHooks []PlayerCharacterHook
var playerCharacterAfterDeleteHooks []PlayerCharacterHook
var playerCharacterAfterUpsertHooks []PlayerCharacterHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PlayerCharacter) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playerCharacterBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PlayerCharacter) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playerCharacterBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PlayerCharacter) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playerCharacterBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PlayerCharacter) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playerCharacterBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PlayerCharacter) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playerCharacterAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PlayerCharacter) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playerCharacterAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PlayerCharacter) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playerCharacterAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PlayerCharacter) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playerCharacterAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PlayerCharacter) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playerCharacterAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPlayerCharacterHook registers your hook function for all future operations.
func AddPlayerCharacterHook(hookPoint boil.HookPoint, playerCharacterHook PlayerCharacterHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		playerCharacterBeforeInsertHooks = append(playerCharacterBeforeInsertHooks, playerCharacterHook)
	case boil.BeforeUpdateHook:
		playerCharacterBeforeUpdateHooks = append(playerCharacterBeforeUpdateHooks, playerCharacterHook)
	case boil.BeforeDeleteHook:
		playerCharacterBeforeDeleteHooks = append(playerCharacterBeforeDeleteHooks, playerCharacterHook)
	case boil.BeforeUpsertHook:
		playerCharacterBeforeUpsertHooks = append(playerCharacterBeforeUpsertHooks, playerCharacterHook)
	case boil.AfterInsertHook:
		playerCharacterAfterInsertHooks = append(playerCharacterAfterInsertHooks, playerCharacterHook)
	case boil.AfterSelectHook:
		playerCharacterAfterSelectHooks = append(playerCharacterAfterSelectHooks, playerCharacterHook)
	case boil.AfterUpdateHook:
		playerCharacterAfterUpdateHooks = append(playerCharacterAfterUpdateHooks, playerCharacterHook)
	case boil.AfterDeleteHook:
		playerCharacterAfterDeleteHooks = append(playerCharacterAfterDeleteHooks, playerCharacterHook)
	case boil.AfterUpsertHook:
		playerCharacterAfterUpsertHooks = append(playerCharacterAfterUpsertHooks, playerCharacterHook)
	}
}

// One returns a single playerCharacter record from the query.
func (q playerCharacterQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PlayerCharacter, error) {
	o := &PlayerCharacter{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for player_characters")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PlayerCharacter records from the query.
func (q playerCharacterQuery) All(ctx context.Context, exec boil.ContextExecutor) (PlayerCharacterSlice, error) {
	var o []*PlayerCharacter

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PlayerCharacter slice")
	}

	if len(playerCharacterAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PlayerCharacter records in the query.
func (q playerCharacterQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count player_characters rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q playerCharacterQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if player_characters exists")
	}

	return count > 0, nil
}

// Campaign pointed to by the foreign key.
func (o *PlayerCharacter) Campaign(mods ...qm.QueryMod) campaignQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CampaignID),
	}

	queryMods = append(queryMods, mods...)

	query := Campaigns(queryMods...)
	queries.SetFrom(query.Query, "\"campaigns\"")

	return query
}

// User pointed to by the foreign key.
func (o *PlayerCharacter) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// LoadCampaign allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (playerCharacterL) LoadCampaign(ctx context.Context, e boil.ContextExecutor, singular bool, maybePlayerCharacter interface{}, mods queries.Applicator) error {
	var slice []*PlayerCharacter
	var object *PlayerCharacter

	if singular {
		object = maybePlayerCharacter.(*PlayerCharacter)
	} else {
		slice = *maybePlayerCharacter.(*[]*PlayerCharacter)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &playerCharacterR{}
		}
		if !queries.IsNil(object.CampaignID) {
			args = append(args, object.CampaignID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playerCharacterR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CampaignID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.CampaignID) {
				args = append(args, obj.CampaignID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`campaigns`),
		qm.WhereIn(`campaigns.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Campaign")
	}

	var resultSlice []*Campaign
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Campaign")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for campaigns")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for campaigns")
	}

	if len(playerCharacterAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Campaign = foreign
		if foreign.R == nil {
			foreign.R = &campaignR{}
		}
		foreign.R.PlayerCharacters = append(foreign.R.PlayerCharacters, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CampaignID, foreign.ID) {
				local.R.Campaign = foreign
				if foreign.R == nil {
					foreign.R = &campaignR{}
				}
				foreign.R.PlayerCharacters = append(foreign.R.PlayerCharacters, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (playerCharacterL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybePlayerCharacter interface{}, mods queries.Applicator) error {
	var slice []*PlayerCharacter
	var object *PlayerCharacter

	if singular {
		object = maybePlayerCharacter.(*PlayerCharacter)
	} else {
		slice = *maybePlayerCharacter.(*[]*PlayerCharacter)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &playerCharacterR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playerCharacterR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(playerCharacterAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.PlayerCharacters = append(foreign.R.PlayerCharacters, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.PlayerCharacters = append(foreign.R.PlayerCharacters, local)
				break
			}
		}
	}

	return nil
}

// SetCampaign of the playerCharacter to the related item.
// Sets o.R.Campaign to related.
// Adds o to related.R.PlayerCharacters.
func (o *PlayerCharacter) SetCampaign(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Campaign) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"player_characters\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"campaign_id"}),
		strmangle.WhereClause("\"", "\"", 2, playerCharacterPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CampaignID, related.ID)
	if o.R == nil {
		o.R = &playerCharacterR{
			Campaign: related,
		}
	} else {
		o.R.Campaign = related
	}

	if related.R == nil {
		related.R = &campaignR{
			PlayerCharacters: PlayerCharacterSlice{o},
		}
	} else {
		related.R.PlayerCharacters = append(related.R.PlayerCharacters, o)
	}

	return nil
}

// RemoveCampaign relationship.
// Sets o.R.Campaign to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *PlayerCharacter) RemoveCampaign(ctx context.Context, exec boil.ContextExecutor, related *Campaign) error {
	var err error

	queries.SetScanner(&o.CampaignID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("campaign_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Campaign = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.PlayerCharacters {
		if queries.Equal(o.CampaignID, ri.CampaignID) {
			continue
		}

		ln := len(related.R.PlayerCharacters)
		if ln > 1 && i < ln-1 {
			related.R.PlayerCharacters[i] = related.R.PlayerCharacters[ln-1]
		}
		related.R.PlayerCharacters = related.R.PlayerCharacters[:ln-1]
		break
	}
	return nil
}

// SetUser of the playerCharacter to the related item.
// Sets o.R.User to related.
// Adds o to related.R.PlayerCharacters.
func (o *PlayerCharacter) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"player_characters\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, playerCharacterPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &playerCharacterR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			PlayerCharacters: PlayerCharacterSlice{o},
		}
	} else {
		related.R.PlayerCharacters = append(related.R.PlayerCharacters, o)
	}

	return nil
}

// PlayerCharacters retrieves all the records using an executor.
func PlayerCharacters(mods ...qm.QueryMod) playerCharacterQuery {
	mods = append(mods, qm.From("\"player_characters\""))
	return playerCharacterQuery{NewQuery(mods...)}
}

// FindPlayerCharacter retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPlayerCharacter(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*PlayerCharacter, error) {
	playerCharacterObj := &PlayerCharacter{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"player_characters\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, playerCharacterObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from player_characters")
	}

	return playerCharacterObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PlayerCharacter) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no player_characters provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(playerCharacterColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	playerCharacterInsertCacheMut.RLock()
	cache, cached := playerCharacterInsertCache[key]
	playerCharacterInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			playerCharacterAllColumns,
			playerCharacterColumnsWithDefault,
			playerCharacterColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(playerCharacterType, playerCharacterMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(playerCharacterType, playerCharacterMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"player_characters\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"player_characters\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into player_characters")
	}

	if !cached {
		playerCharacterInsertCacheMut.Lock()
		playerCharacterInsertCache[key] = cache
		playerCharacterInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PlayerCharacter.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PlayerCharacter) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	playerCharacterUpdateCacheMut.RLock()
	cache, cached := playerCharacterUpdateCache[key]
	playerCharacterUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			playerCharacterAllColumns,
			playerCharacterPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update player_characters, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"player_characters\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, playerCharacterPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(playerCharacterType, playerCharacterMapping, append(wl, playerCharacterPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update player_characters row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for player_characters")
	}

	if !cached {
		playerCharacterUpdateCacheMut.Lock()
		playerCharacterUpdateCache[key] = cache
		playerCharacterUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q playerCharacterQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for player_characters")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for player_characters")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PlayerCharacterSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerCharacterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"player_characters\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, playerCharacterPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in playerCharacter slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all playerCharacter")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PlayerCharacter) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no player_characters provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(playerCharacterColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	playerCharacterUpsertCacheMut.RLock()
	cache, cached := playerCharacterUpsertCache[key]
	playerCharacterUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			playerCharacterAllColumns,
			playerCharacterColumnsWithDefault,
			playerCharacterColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			playerCharacterAllColumns,
			playerCharacterPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert player_characters, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(playerCharacterPrimaryKeyColumns))
			copy(conflict, playerCharacterPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"player_characters\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(playerCharacterType, playerCharacterMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(playerCharacterType, playerCharacterMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert player_characters")
	}

	if !cached {
		playerCharacterUpsertCacheMut.Lock()
		playerCharacterUpsertCache[key] = cache
		playerCharacterUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PlayerCharacter record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PlayerCharacter) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PlayerCharacter provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), playerCharacterPrimaryKeyMapping)
	sql := "DELETE FROM \"player_characters\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from player_characters")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for player_characters")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q playerCharacterQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no playerCharacterQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from player_characters")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for player_characters")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PlayerCharacterSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(playerCharacterBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerCharacterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"player_characters\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, playerCharacterPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from playerCharacter slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for player_characters")
	}

	if len(playerCharacterAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PlayerCharacter) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPlayerCharacter(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PlayerCharacterSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PlayerCharacterSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerCharacterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"player_characters\".* FROM \"player_characters\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, playerCharacterPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PlayerCharacterSlice")
	}

	*o = slice

	return nil
}

// PlayerCharacterExists checks if the PlayerCharacter row exists.
func PlayerCharacterExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"player_characters\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if player_characters exists")
	}

	return exists, nil
}
